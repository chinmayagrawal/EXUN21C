Q)
Sarthak has a set S of N distinct prime numbers. He grew very fond of that set, and now he only likes a positive integer X if all of its prime factors belong to S. Given the set and a positive integer M, can you find out how many integers he likes which are not more than M?

Note: Sarthak always like the number 1.

Input Format
The first line of each input contains T - the number of test cases. The test cases then follow.
The first line of each test case contains two space-separated integers N and M - the size of S and the limit defined in the statement.
The second line of each test case contains N space-separated integers S1,S2,…,SN - the elements of S.
Output Format
For each test case, output on a single line the number of positive integers Sarthak likes that is not more than M.

Constraints
1≤T≤2
1≤N≤20
1≤M≤1016
2≤Si<1000
S has N distinct prime numbers
Sample Input 1 
1
2 10
3 5
Sample Output 1 
4
Code:
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception{
	    Scanner sc=new Scanner(System.in);
	    int tc=sc.nextInt();
	    while(tc--!=0){
	        int n=sc.nextInt();
	        int m=sc.nextInt();
	        HashSet<Integer> arr=new HashSet<>();
	        HashSet<Integer> ar=new HashSet<>();
	        HashSet<Integer> arr1=new HashSet<>();
	        for(int i=0;i<n;i++){
	            int a=sc.nextInt();
	            arr.add(a);
	        }
	        ar = (HashSet)arr.clone();
	        for(int j=1;j<=m;j++){
	            if(j==1) arr1.add(1);
	            else if(j==2) arr1.add(2);
	            else{
	                for(int i=2;i<j;i++){
                        while(j%i==0){
                            arr1.add(i);
                            j=j/i;
                        }
                    }
                    if(j>2) {
                        arr1.add(j);
                    }
	            }
	            arr.removeAll(arr1);
	            if(arr1.isEmpty()) System.out.print(j+" ");
	            arr1.clear();
	            arr.clear();
	            arr= (HashSet)ar.clone();
	        }
	        System.out.println();
	    }
	}
}
